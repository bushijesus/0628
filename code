//
// Created by Administrator on 2023/6/28.
//

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#define NUM 10
int get_count(int l, int r, int data)
{
    int count = 0;
    for(int i = l; i <= r; i++) {
        if (i % data == 0) {
            continue;
        }
        count++;
    }
    return count;
}

int find_substr(int a[]){
    int dp[NUM] = {0};
    int max = 0;
    for(int i = 0; i < NUM; i++){
        dp[i] = 1;
        for(int j = 0; j < i; j++){
            if(a[i] > a[j] && dp[j] + 1 > dp[i]){
                dp[i] = dp[j] + 1;
                max = dp[i] > max ? dp[i] : max;
            }
        }
    }
    return max;
}

void swap(int arr[], int a, int b){
    int tmp = arr[a];
    arr[a] = arr[b];
    arr[b] = tmp;
}

// 划分小于目标的集合、等于目标的集合、大于目标的集合三者中间的边界
int * partition(int arr[], int l, int r){
    int less = l - 1;
    int more = r;
    while (l < more){
        if(arr[l] < arr[r]){
            swap(arr, ++less, l++);
        }
        else if(arr[l] > arr[r]){
            swap(arr, --more, l);
        }
        else{
            l++;
        }
    }
    int * tmp = (int *)malloc(2 * sizeof (int));
    tmp[0] = less + 1;
    tmp[1] = more;
    swap(arr, more, r);
    return tmp;
}

// 快排2.0  时间复杂度O(N * logN)
void quickSort(int arr[], int l, int r){
    if(l < r){
        srand(time(NULL));
        swap(arr, l + (rand() % (r - l + 1)), r);   // 随机选择一个数放在最右边
        int* p = partition(arr, l, r);
        quickSort(arr, l, p[0]-1);
        quickSort(arr, p[0] + 1, r);
    }
}

void heapInsert(int arr[], int index){
    // 不断与父节点做比较
    while(arr[index] > arr[(index-1) / 2]){
        swap(arr, index, (index-1) / 2);
        index = (index-1) / 2;
    }
}

// 某数在index位置，能否向下移动
void heapify(int arr[], int index, int heapSize){
    int left = index * 2 + 1; // 左孩子的下标
    while (left < heapSize){
        // 将两个孩子中较大的值赋给largest
        int largest = left + 1 < heapSize && arr[left+1] > arr[left] ? left+1 : left;
        // 父节点和较大的孩子之间，谁的值大，把下标赋给largest
        largest = arr[largest] > arr[index] ? largest :index;
        if(largest == index)
            break;
        swap(arr, largest, index);
        index = largest;
        left = index * 2 + 1;
    }
}

void heapSort(int arr[], int sz){
    if(arr == NULL || sz < 2)
        return;
    for (int i = 0; i < sz; ++i) {   // O(N)
        // 把数组整体变成大根堆
        heapInsert(arr, i);    // O(log N)
    }
    // 将0位置上的数与最后一个数交换并将最后一个数从堆中移除
    swap(arr, 0, --sz);
    while (sz > 0){                 // O(N)
        heapify(arr, 0, sz);  // O(log N)
        swap(arr, 0, --sz);   // O(1)
    }
}
int main()
{
//    int arr[NUM] = {0};
//    for(int i = 0; i < NUM; i++){
//        scanf("%d",&arr[i]);
//    }
//    int res = find_substr(arr);
//    printf("%d\n", res);
//    return 0;

//    int arr[10] = {2,5,3,2,6,5,7,8,9,4};
//    quickSort(arr, 0, 9);
//    for (int i = 0; i < 10; ++i) {
//        printf("%d ",arr[i]);
//    }

int arr[10] = {2,5,3,2,6,5,7,8,9,4};
    heapSort(arr, 10);
    for (int i = 0; i < 10; ++i) {
    printf("%d ",arr[i]);
    }
}
